- include_vars: globus-auth.yml
- include_vars: globus-connect-server.yml
- include_vars: certbot.yml

- name: Ensure the hostname is set
  hostname:
    name: "{{ inventory_hostname }}"
  become: yes
  become_user: root

# How to manage port configuration ?
#  Port 2811 inbound from 54.237.254.192/29
#  Port 50000 - 51000 inbound/outbound to/from Any.
#  Port 443 outbound to 54.237.254.192/29 and nexus.api.globusonline.org
#  Port 443 outbound to downloads.globus.org
#  Port 443 outbound to crl.cilogon.org
#  Port 7512 inbound from 54.237.254.192/29
#  Port 443 inbound from Any

# Adding Globus repository to yum
- name: Adding Globus repo to yum
  get_url:
    url:  https://downloads.globus.org/toolkit/globus-connect-server/globus-connect-server-repo-latest.noarch.rpm
    dest: /tmp/globus-connect-server-repo-latest.noarch.rpm
  become: yes
  become_user: root

- name: Adding Globus repo key to yum
  rpm_key:
    state: present
    key: https://downloads.globus.org/toolkit/gt6/stable/repo/rpm/RPM-GPG-KEY-Globus
  become: yes
  become_user: root

- name: Install Globus repo rpm
  yum:
    name: /tmp/globus-connect-server-repo-latest.noarch.rpm
    state: present
  become: yes
  become_user: root

# Adding EPEL repository to yum
- name: Adding EPEL repository, required by Globus
  get_url:
    url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    dest: /tmp/epel-release-latest-7.noarch.rpm
  become: yes
  become_user: root

- name: Install Globus repo rpm
  yum:
    name: /tmp/epel-release-latest-7.noarch.rpm
    state: present
  become: yes
  become_user: root

# Installing globus-connect-server
- name: install updates
  yum: update_cache=yes

- name: Install yum-plugin-priorities
  yum:
    name: yum-plugin-priorities
    state: present
  become: yes
  become_user: root

- name: Install globus-connect-server
  yum:
    name: globus-connect-server
    state: present
    enablerepo: epel
  become: yes
  become_user: root

# If researchnetwork, get the mellanox IP for the DataInterface
- name: get the mellanox ip IP address
  script: mellanox_ip_address.py {{ hostvars[inventory_hostname]['ansible_all_ipv4_addresses']  | to_json | quote }}
  register: mellanox_ip_address_command
  check_mode: no
  changed_when: False
  when: endpoint_Name == "researchnetwork"

- name: set DataInterface
  set_fact: gridftp_DataInterface={{ mellanox_ip_address_command.stdout | from_json | json_query('ip') }}
  when: endpoint_Name == "researchnetwork"

# When the endpoint is not "researchnetwork" use the hostname
- name: set DataInterface
  set_fact: gridftp_DataInterface={{ inventory_hostname }}
  when: endpoint_Name != "researchnetwork"

# Copy in globus-connect-server.conf
- name: install the config file
  template:
    src=globus-connect-server.conf.j2
    dest=/etc/globus-connect-server.conf
    owner=root
    mode=644
  become: yes
  become_user: root

#Setup globus connect server
- name: Setup Globus connect server
  command: /bin/globus-connect-server-setup
  environment:
    GLOBUS_USER: "{{ globus_username }}"
    GLOBUS_PASSWORD: "{{ globus_password }}"
  become: yes
  become_user: root

# Installing CertBot
# This was required on the test CentOS to fix a snapd install issue with an selinux dependency
# yum-config-manager --enable cr
# - name: enable cr
#   shell: yum-config-manager --enable cr
#   become: yes
#   become_user: root

#Only install CertBot for the main authorising endpoint. e.g. SSLs are needed
#for Apache so the user can authenticate.

- name: Install snapd
  yum:
    name: snapd
    state: present
    enablerepo: epel
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: Enable snapd.
  service:
    name: snapd.socket
    state: started
    enabled: yes
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: symlink for classic snap
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: Install certbot (classic)
  snap:
    name: certbot
    classic: yes
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

# Update ssl.conf as per the Mozilla configurator. https://ssl-config.mozilla.org/
# Add virtual host to apache ssl.conf for CertBot configuration
- name: copy in the updated ssl.conf
  template: src=ssl.conf.j2 dest=/etc/httpd/conf.d/ssl.conf owner=root mode=644
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: setting ServerName for Apache. Required for CertBot
  replace:
    path: /etc/httpd/conf/httpd.conf
    regexp: '(#ServerName www.example.com:80)'
    replace: 'ServerName {{ inventory_hostname }}'
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: Disable welcome message
  replace:
    path: /etc/httpd/conf.d/welcome.conf
    regexp: '(    ErrorDocument 403 /.noindex.html)'
    replace: '#    ErrorDocument 403 /.noindex.html'
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

#Setup certbot for Apache
- name: Setup Let's Encrypt SSL certificates for Apache
  command: "/snap/bin/certbot -d {{ inventory_hostname }} --apache  -n -m {{ certbot_email }} --agree-tos"
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

# Setup logrotate for transfers, track who transfers what
- name: Configure transfer log for gridftp
  copy:
    content: "log_transfer /var/log/gridftp_transfer.log\n"
    dest: "/var/lib/globus-connect-server/gridftp.d/transfer-logging"
    mode: "0644"
  become: yes
  become_user: root

- name: create symlink
  file:
    src:  /var/lib/globus-connect-server/gridftp.d/transfer-logging
    dest: /etc/gridftp.d/transfer-logging
    state: link
  become: yes
  become_user: root

- name: update logging config for rotation
  lineinfile:
    path: /etc/logrotate.d/globus-connect-server
    regexp: '{{item.From}}'
    line:   '{{item.To}}'
    state: present
  with_items:
   - { From: '(/var/log/gridftp.log)', To: '/var/log/gridftp.log /var/log/gridftp_transfer.log'}
   - { From: '(postrotate)', To: '(sharedscripts\n   postrotate)'}
  become: yes
  become_user: root

# Setup OAuth login page for Example.edu.au
- name: copy authorize.html for Example.edu.au branding
  copy:
    dest=/usr/share/myproxy-oauth/myproxyoauth/templates/authorize.html
    src=authorize.html
    owner=root
    mode=644
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: copy oauth.css for Example.edu.au branding
  copy:
    dest=/usr/share/myproxy-oauth/myproxyoauth/static/oauth.css
    src=oauth.css
    owner=root
    mode=644
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'

- name: copy Your_logo.png for Example.edu.au branding
  copy:
    dest=/usr/share/myproxy-oauth/myproxyoauth/static/massive_logo.png
    src=massive_logo.png
    owner=root
    mode=644
  become: yes
  become_user: root
  when: authorising_endpoint == 'True'
